name: Build, Test, and Deploy

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      docker:
        image: docker:20.10.16
        options: --privileged
        ports:
          - 4000:4000
          - 3000:3000
          - 6379:6379

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build backend Docker image
      run: docker-compose -f docker-compose.yml build --no-cache backend

    - name: Tag backend Docker image
      run: |
        BACKEND_IMAGE_ID=$(docker images nestjs-app -q)
        if [ -z "$BACKEND_IMAGE_ID" ]; then
          echo "Error: Backend image ID not found"
          exit 1
        fi
        docker tag $BACKEND_IMAGE_ID ${{ secrets.DOCKER_USERNAME }}/nestjs-app:latest

    - name: Push backend Docker image to Docker Hub
      run: |
        BACKEND_IMAGE_ID=$(docker images nestjs-app -q)
        if [ -z "$BACKEND_IMAGE_ID" ]; then
          echo "Error: Backend image ID not found"
          exit 1
        fi
        docker push ${{ secrets.DOCKER_USERNAME }}/nestjs-app:latest
        docker tag ${{ secrets.DOCKER_USERNAME }}/nestjs-app:latest ${{ secrets.DOCKER_USERNAME }}/nestjs-app:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/nestjs-app:${{ github.sha }}

    - name: Build frontend Docker image
      run: docker-compose -f docker-compose.yml build --no-cache frontend

    - name: Tag frontend Docker image
      run: |
        FRONTEND_IMAGE_ID=$(docker images react-app -q)
        if [ -z "$FRONTEND_IMAGE_ID" ]; then
          echo "Error: Frontend image ID not found"
          exit 1
        fi
        docker tag $FRONTEND_IMAGE_ID ${{ secrets.DOCKER_USERNAME }}/react-app:latest

    - name: Push frontend Docker image to Docker Hub
      run: |
        FRONTEND_IMAGE_ID=$(docker images react-app -q)
        if [ -z "$FRONTEND_IMAGE_ID" ]; then
          echo "Error: Frontend image ID not found"
          exit 1
        fi
        docker push ${{ secrets.DOCKER_USERNAME }}/react-app:latest
        docker tag ${{ secrets.DOCKER_USERNAME }}/react-app:latest ${{ secrets.DOCKER_USERNAME }}/react-app:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/react-app:${{ github.sha }}

    - name: Start Docker Compose services
      run: docker-compose up -d

    - name: Check backend logs
      run: docker-compose logs backend

    - name: Wait for the backend to be ready
      run: |
        echo "Waiting for the backend service to start..."
        RETRIES=10
        until curl -sSf -X POST -H "Content-Type: application/json" --data '{"query":"{ users { id } }"}' http://localhost:4000/api || [ $RETRIES -eq 0 ]; do
          echo "Waiting for backend to be ready, retries left: $RETRIES..."
          docker-compose logs backend
          sleep 10
          RETRIES=$((RETRIES-1))
        done
        if [ $RETRIES -eq 0 ]; then
          echo "Backend service failed to start."
          docker-compose logs backend
          echo "Performing a more detailed check on the GraphQL endpoint..."
          curl -v -X POST -H "Content-Type: application/json" --data '{"query":"{ users { id } }"}' http://localhost:4000/api
          exit 1
        fi

    - name: Install Newman
      run: npm install -g newman

    - name: Run Postman Tests
      run: newman run backend/postman/api-tests.json -e backend/postman/postman_environment.json --verbose

    - name: Trigger Render Deployment
      run: |
        curl -X POST -d '{}' ${{ secrets.RENDER_WEBHOOK_URL }}
