{
	"info": {
		"_postman_id": "cff7189d-c4cf-411f-8e90-a0c1e26cddf7",
		"name": "projet-web api tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "27157939"
	},
	"item": [
		{
			"name": "graphql query - create a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('data');\r",
							"    pm.expect(jsonData.data).to.have.property('createUser');\r",
							"    pm.expect(jsonData.data.createUser).to.have.property('id');\r",
							"    pm.expect(jsonData.data.createUser.username).to.eql('test1');\r",
							"    pm.expect(jsonData.data.createUser.email).to.eql('test1@example.com');\r",
							"    pm.environment.set('userId1', parseInt(jsonData.data.createUser.id));\r",
							"    console.log(\"userId1 set to:\", jsonData.data.createUser.id);\r",
							"    \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"query\": \"mutation CreateUser($username: String!, $email: String!, $password: String!) { createUser(username: $username, email: $email, password: $password) { id username email password conversationIds } }\",\r\n  \"variables\": {\r\n    \"username\": \"test1\",\r\n    \"email\": \"test1@example.com\",\r\n    \"password\": \"123\"\r\n  }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:4000/api"
			},
			"response": []
		},
		{
			"name": "graphql query - create a user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create User\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('data');\r",
							"    pm.expect(jsonData.data).to.have.property('createUser');\r",
							"    pm.expect(jsonData.data.createUser).to.have.property('id');\r",
							"    pm.expect(jsonData.data.createUser.username).to.eql('test2');\r",
							"    pm.expect(jsonData.data.createUser.email).to.eql('test2@example.com');\r",
							"    pm.environment.set('userId2', parseInt(jsonData.data.createUser.id));\r",
							"    console.log(\"userId2 set to:\", jsonData.data.createUser.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"query\": \"mutation CreateUser($username: String!, $email: String!, $password: String!) { createUser(username: $username, email: $email, password: $password) { id username email password conversationIds } }\",\r\n  \"variables\": {\r\n    \"username\": \"test2\",\r\n    \"email\": \"test2@example.com\",\r\n    \"password\": \"123\"\r\n  }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:4000/api"
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"if (jsonData.data.login && jsonData.data.login.token) {\r",
							"  pm.environment.set(\"authToken\", jsonData.data.login.token);\r",
							"} else {\r",
							"  pm.environment.unset(\"authToken\");\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"query\": \"mutation Login($loginUserInput: LoginUserInput!) { login(loginUserInput: $loginUserInput) { id username email token conversationIds } }\",\r\n  \"variables\": {\r\n    \"loginUserInput\": {\r\n      \"email\": \"test1@example.com\",\r\n      \"password\": \"123\"\r\n    }\r\n  }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:4000/api"
			},
			"response": []
		},
		{
			"name": "graphql quey - create a conversation",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Conversation\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('data');\r",
							"    pm.expect(jsonData.data).to.have.property('createConversation');\r",
							"    pm.expect(jsonData.data.createConversation).to.have.property('id');\r",
							"    pm.expect(jsonData.data.createConversation.participants).to.be.an('array');\r",
							"    pm.environment.set('conversationId', jsonData.data.createConversation.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"query\": \"mutation CreateConversation($userId1: Int!, $userId2: Int!) { createConversation(userId1: $userId1, userId2: $userId2) { id participants { id } messages { id content createdAt author { id username email } } startedAt } }\",\r\n  \"variables\": {\r\n    \"userId1\": {{userId1}},\r\n    \"userId2\": {{userId2}}\r\n  }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:4000/api"
			},
			"response": []
		},
		{
			"name": "graphql quey - create a conversation without token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Create Conversation - Invalid Token - Status Code is 401\", function () {\r",
							"  pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Create Conversation - Invalid Token - Error Message\", function () {\r",
							"  const jsonData = pm.response.json();\r",
							"  pm.expect(jsonData).to.have.property('statusCode', 401);\r",
							"  pm.expect(jsonData).to.have.property('message', 'Unauthorized');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer invalid-token",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"query\": \"mutation CreateConversation($userId1: Int!, $userId2: Int!) { createConversation(userId1: $userId1, userId2: $userId2) { id participants { id } messages { id content createdAt author { id username email } } startedAt } }\",\r\n  \"variables\": {\r\n    \"userId1\": {{userId1}},\r\n    \"userId2\": {{userId2}}\r\n  }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:4000/api"
			},
			"response": []
		},
		{
			"name": "graphql query - send message",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Send Message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property('data');\r",
							"    pm.expect(jsonData.data).to.have.property('sendMessage');\r",
							"    pm.expect(jsonData.data.sendMessage).to.have.property('id');\r",
							"    pm.expect(jsonData.data.sendMessage.content).to.eql('Hello!');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{authToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"query\": \"mutation SendMessage($userId: Int!, $conversationId: Int!, $content: String!) { sendMessage(userId: $userId, conversationId: $conversationId, content: $content) { id content createdAt author { id username email } } }\",\r\n  \"variables\": {\r\n    \"userId\": {{userId1}},\r\n    \"conversationId\": {{conversationId}},\r\n    \"content\": \"Hello!\"\r\n  }\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "http://localhost:4000/api"
			},
			"response": []
		}
	]
}